#!/usr/bin/env babel-node

const fs = require('fs');
import path from 'path';
import Immutable from 'immutable';
import { fetchPage, writePage } from '../app/static-build/builder';
import { downloadOldSitemap, Sitemap } from '../app/static-build/sitemap';
import availableLocales from '../config/available-locales';
import { getAllPaths } from '../app/router/route-helpers';

const [bin, script, serverUrl, outDir, target] = process.argv;

const sitemapDomain = target;
const oldSitemapUrl = `${target}/sitemap.xml`;

if (!serverUrl || !outDir || !target) {
  throw new Error(`Usage: ${bin} ${script} host directory target`);
}

const newSitemap = new Sitemap(sitemapDomain);

const processPage = function(pagePath) {
  return fetchPage(serverUrl, pagePath)
    .then(([url, contents]) => {
      newSitemap.addUrl(url, contents);
      return writePage(outDir, [url, contents]);
    });
};

// Batch processPage/fetchPage so we don't overwhelm the server and fail
// to process some pages
// getAllPaths (pagesLeft) returns an Immutable.List
function batchProcessPage(pagesLeft, filenames) {
  var size = 10;
  var pagesToProcess = pagesLeft.take(size);
  pagesLeft = pagesLeft.slice(size);
  filenames = filenames || Immutable.List([]);

  return Promise.all(pagesToProcess.map(processPage)).then((files) => {
    filenames = filenames.concat(files);
    if (pagesLeft.size) {
      return batchProcessPage(pagesLeft, filenames);
    } else {
      return filenames;
    }
  });
}

batchProcessPage(getAllPaths(availableLocales)).then(function(filenames) {
  console.log('Completed static html dump:');
  console.log(filenames.sort().map((filename) => `  ${filename}`).join('\n'));

  downloadOldSitemap(sitemapDomain, oldSitemapUrl).then((oldSitemap) => {
    newSitemap.importTimestampsFromOldSitemap(oldSitemap);
    const sitemapOutputPath = path.join(outDir, 'sitemap.xml');
    fs.writeFileSync(sitemapOutputPath, newSitemap.toXml());
    console.log(`New sitemap written to ${sitemapOutputPath}`);
  });
}).catch((error) => console.error(error));
