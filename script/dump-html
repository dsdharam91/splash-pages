#!/usr/bin/env babel-node

const https = require('https');
const fs = require('fs');
import path from 'path';
import { fetchPage, writePage } from '../app/static-build/builder';
import { SitemapUrlSet } from '../app/static-build/sitemap';
import availableLocales from '../config/available-locales';
import { getAllPaths } from '../app/router/route-helpers';

const [bin, script, serverUrl, outDir] = process.argv;

if (!serverUrl || !outDir) {
  console.error(`Usage: ${bin} ${script} host directory`);
  process.exit(1);
}

// Download the old sitemap
// TODO: Download this from live (https://gocardless.com/sitemap.xml)
// TODO: Initalise SitemapUrlSet with domain name from environmental variable
https.get('https://dl.dropboxusercontent.com/s/otbggbop9dohag0/sitemap.xml', function(res) {
  if (res.statusCode == 200) {
    res.on('data', (oldSitemapXml) => {
      const oldSitemap = new SitemapUrlSet('https://gocardless.com').fromXml(oldSitemapXml);
    });
  }
}).on('error', (e) => {
  console.error(`Wasn't able to download the old sitemap: ${e.message}`);
});

let newSitemap = new SitemapUrlSet('https://gocardless.com');

const processPage = function(pagePath) {
  return fetchPage(serverUrl, pagePath)
    .then(([url, contents]) => {
      newSitemap.addUrl(url, contents);
      return writePage(outDir, [url, contents]);
    })
    .catch(console.error.bind(console));
};

Promise.all(getAllPaths(availableLocales).map(processPage)).then(function(filenames) {
  console.log('Completed static html dump:');
  console.log(filenames.sort().map((filename) => `  ${filename}`).join('\n'));

  const sitemapOutputPath = path.join(outDir, 'sitemap.xml');
  fs.writeFileSync(sitemapOutputPath, newSitemap.toXml());
  console.log(`\nSitemap written to ${sitemapOutputPath}`);
}).catch(console.error.bind(console));
